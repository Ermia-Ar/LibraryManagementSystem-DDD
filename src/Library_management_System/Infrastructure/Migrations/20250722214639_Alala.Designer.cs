// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250722214639_Alala")]
    partial class Alala
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Library")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Aggregates.Books.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<string>("CopyIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("Author", "Core.Domain.Aggregates.Books.Book.Author#Author", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PublicationDate", "Core.Domain.Aggregates.Books.Book.PublicationDate#PublicationDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Publisher", "Core.Domain.Aggregates.Books.Book.Publisher#Publisher", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "Core.Domain.Aggregates.Books.Book.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Books", "Library");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Copies.Copy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OperationalStatus")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalCondition")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Core.Domain.Aggregates.Copies.Copy.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.ComplexProperty<Dictionary<string, object>>("Moeny", "Core.Domain.Aggregates.Copies.Copy.Price#Price.Moeny#Money", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<double>("Value")
                                        .HasColumnType("float");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Copies", "Library");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Loans.Loan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<long>("CopyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("BorrowDate", "Core.Domain.Aggregates.Loans.Loan.BorrowDate#BorrowDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DueDate", "Core.Domain.Aggregates.Loans.Loan.DueDate#DueDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FineAmount", "Core.Domain.Aggregates.Loans.Loan.FineAmount#FineAmount", b1 =>
                        {
                            b1.IsRequired();

                            b1.ComplexProperty<Dictionary<string, object>>("Money", "Core.Domain.Aggregates.Loans.Loan.FineAmount#FineAmount.Money#Money", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<double>("Value")
                                        .HasColumnType("float");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ReturnDate", "Core.Domain.Aggregates.Loans.Loan.ReturnDate#ReturnDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime?>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CopyId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Loans", "Library");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Reservations.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000L);

                    b.Property<long>("CopyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("ReservationDate", "Core.Domain.Aggregates.Reservations.Reservation.ReservationDate#ReservationDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CopyId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Reservations", "Library");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 100000L);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LoanIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "Core.Domain.Aggregates.Users.User.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Core.Domain.Aggregates.Users.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Core.Domain.Aggregates.Users.User.Name#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "Core.Domain.Aggregates.Users.User.PhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Users", "Library");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Copies.Copy", b =>
                {
                    b.HasOne("Core.Domain.Aggregates.Books.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Loans.Loan", b =>
                {
                    b.HasOne("Core.Domain.Aggregates.Copies.Copy", null)
                        .WithOne()
                        .HasForeignKey("Core.Domain.Aggregates.Loans.Loan", "CopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Aggregates.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Reservations.Reservation", b =>
                {
                    b.HasOne("Core.Domain.Aggregates.Copies.Copy", null)
                        .WithOne()
                        .HasForeignKey("Core.Domain.Aggregates.Reservations.Reservation", "CopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Aggregates.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
