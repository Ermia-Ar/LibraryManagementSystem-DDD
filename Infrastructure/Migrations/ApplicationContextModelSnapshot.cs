// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Aggregates.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("Author", "Core.Domain.Aggregates.Books.Book.Author#Author", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PublicationDate", "Core.Domain.Aggregates.Books.Book.PublicationDate#PublicationDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Publisher", "Core.Domain.Aggregates.Books.Book.Publisher#Publisher", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "Core.Domain.Aggregates.Books.Book.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Circulates.Circulate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("BorrowDate", "Core.Domain.Aggregates.Circulates.Circulate.BorrowDate#BorrowDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("CopyId", "Core.Domain.Aggregates.Circulates.Circulate.CopyId#CopyId", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DueDate", "Core.Domain.Aggregates.Circulates.Circulate.DueDate#DueDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FineAmount", "Core.Domain.Aggregates.Circulates.Circulate.FineAmount#FineAmount", b1 =>
                        {
                            b1.IsRequired();

                            b1.ComplexProperty<Dictionary<string, object>>("Money", "Core.Domain.Aggregates.Circulates.Circulate.FineAmount#FineAmount.Money#Money", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<double>("Value")
                                        .HasColumnType("float");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ReturnDate", "Core.Domain.Aggregates.Circulates.Circulate.ReturnDate#ReturnDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime?>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UserId", "Core.Domain.Aggregates.Circulates.Circulate.UserId#UserId", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");
                        });

                    b.HasKey("Id");

                    b.ToTable("Circulates");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Copies.Copy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("BookId", "Core.Domain.Aggregates.Copies.Copy.BookId#BookId", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("OperationalStatus", "Core.Domain.Aggregates.Copies.Copy.OperationalStatus#OperationalStatus", b1 =>
                        {
                            b1.Property<int>("value__")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhysicalCondition", "Core.Domain.Aggregates.Copies.Copy.PhysicalCondition#PhysicalCondition", b1 =>
                        {
                            b1.Property<int>("value__")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Core.Domain.Aggregates.Copies.Copy.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.ComplexProperty<Dictionary<string, object>>("Moeny", "Core.Domain.Aggregates.Copies.Copy.Price#Price.Moeny#Money", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<double>("Value")
                                        .HasColumnType("float");
                                });
                        });

                    b.HasKey("Id");

                    b.ToTable("Copies");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Users.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("CopyId", "Core.Domain.Aggregates.Users.Reservation.CopyId#CopyId", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ReservationDate", "Core.Domain.Aggregates.Users.Reservation.ReservationDate#ReservationDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "Core.Domain.Aggregates.Users.Reservation.Status#ReservationStatus", b1 =>
                        {
                            b1.Property<int>("value__")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UserId", "Core.Domain.Aggregates.Users.Reservation.UserId#UserId", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");
                        });

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Core.Domain.Aggregates.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "Core.Domain.Aggregates.Users.User.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Core.Domain.Aggregates.Users.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Core.Domain.Aggregates.Users.User.Name#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "Core.Domain.Aggregates.Users.User.PhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Sex", "Core.Domain.Aggregates.Users.User.Sex#Sex", b1 =>
                        {
                            b1.Property<int>("value__")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
